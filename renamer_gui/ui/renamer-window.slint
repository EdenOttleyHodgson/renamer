import {S_ActionGroup, S_Action} from "./structs.slint";
import {ActionGroupComponent} from "./action-group.slint";
import {Button, ScrollView, ListView} from "std-widgets.slint";
import {ActionMenu} from "./action-menu.slint";
import {ResultsWindow} from "./results-window.slint";
enum StateFlag {
  input,
  waiting,
  finished
}
export component RenamerWindow inherits Window{
  
  preferred-width: 500px;
  preferred-height: 500px;
  callback add_file(int);
  callback remove_file(int, int);
  callback add_action(int, S_Action);
  callback remove_action(int, int);
  callback add_action_group;
  callback remove_action_group(int);
  callback on_go_pressed;
  callback on_finished;
  callback handle_message;
  callback refresh_state;
  callback cleanup;
  in property<[S_ActionGroup]> action-groups;
  in property<[string]> successes;
  in property<[string]> failures;
  in-out property<StateFlag> state_flag: StateFlag.input;
  property <bool> action-menu-active;
  property<int> add_action_group_id;
  /*
  action_input_popup:= ActionInputPopup {
      z: 0;
      x: (parent.width / 4);
      y: (parent.height / 4);
    
      
      width: parent.width / 2;
      height: parent.height /2;
      
      on_confirm(s_action) => {
        root.add_action(popup_group_id, s_action);
        self.close();
        root.refresh_state();
      }
      on_cancel() => {
        self.close()
      }
    }
  */


  Text {
    font-size: 20pt;
    horizontal-alignment: center;
    y: 0;
    text: "Renamer";
  }  
  action-group-layout := VerticalLayout {
    x: 0;
    min-width: 0.7 * parent.width;
    height: 0.8 * parent.height;
    y: parent.height / 10;
    padding: 10px;
    group-list:= ListView {  
      for group[i] in action-groups: ActionGroupComponent {
        display_title: i == 0 ? true : false;
        padding: 5px;
        width: 100%;
        height: parent.height / 3;
        //preferred-height: parent.height / 5;
        action_group: group;
        on_add_file(group_id) => {
          root.add_file(group_id); 
          root.refresh_state()
        }
        on_remove_file(group_id, action_id) => {
          root.remove_file(group_id, action_id);
          root.refresh_state();
        }
        on_add_action(group_id) => {
          add_action_group_id = group_id;
          action-menu-active = true; 
        }
        on_remove_action(group_id, action_id) => {
          root.remove_action(group_id, action_id);
          root.refresh_state();
        }
        on_remove_self() => {
          root.remove_action_group(group.id);
          root.refresh_state()
        
        }
      }
    }

    Button {
      max-height: parent.height / 10;
      text: "Add Action Group";
      clicked => {
        root.add_action_group();
        root.refresh_state();

      }
    }
    
  }
  action-menu := Rectangle {
    width: 25%;
    x: 0.7 * parent.width;
    y: parent.height / 10;
    padding: 10px; 
    height: 0.8 * parent.height;
    border-color: black;
    border-width: 3px;
    ActionMenu {
      
      width: 100%;
      height: 100%;
      on_confirm(s_action) => {
        root.add_action(add_action_group_id, s_action);
        root.action-menu-active = false;
        root.refresh_state();
      }
      on_cancel() => {
        root.action-menu-active = false;
      }
    }
  }
  results-window := ResultsWindow {
    visible: state_flag == StateFlag.finished ? true : false;
    width: 25%;
    x: 0.7 * parent.width;
    y: parent.height / 10;
    padding: 10px; 
    height: 0.8 * parent.height;
    border-color: black;
    border-width: 3px;
    on_ok_clicked => {root.state_flag = StateFlag.input}
    successes: successes;
    failures: failures;
  }
  states  [
    active when action-menu-active && state_flag != StateFlag.finished: {
      action-menu.visible: true;
      action-group-layout.width: 0.7 * root.width;
    }
    active when state_flag == StateFlag.finished: {
      action-group-layout.width: 0.7 * root.width;
      action-menu.visible: false;
      results-window.visible: true; 
    }
    active when !action-menu-active: {
      action-menu.visible: false; 
      action-group-layout.width: root.width;
    }
    
  ]

  go_button:= Button {
      y: action-group-layout.y + action-group-layout.height + 20px;
      enabled: state_flag == StateFlag.waiting ? false : true;
      text: state_flag == StateFlag.waiting ? "Processing" : "Go";
      clicked => {
        if(state_flag != StateFlag.waiting) {
          root.on_go_pressed()         
        }
      }
  }
}


